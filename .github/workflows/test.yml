name: Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh --eval 'db.getMongo().ping()'
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd server && npm ci
        cd ../client && npm ci
        cd ..

    - name: Setup test environment
      run: |
        # Create test environment files
        cp server/.env.example server/.env.test
        echo "NODE_ENV=test" >> server/.env.test
        echo "MONGODB_URI=mongodb://testuser:testpass@localhost:27017/automedia-test?authSource=admin" >> server/.env.test
        echo "REDIS_URL=redis://localhost:6379/1" >> server/.env.test
        echo "JWT_SECRET=test-jwt-secret-${{ matrix.node-version }}" >> server/.env.test

    - name: Run TypeScript compilation check
      run: |
        cd server && npm run typecheck
        cd ../client && npm run typecheck
        cd ..

    - name: Run linting
      run: |
        npm run lint

    - name: Run server tests
      run: |
        cd server
        npm run test:coverage
        cd ..

    - name: Run client tests
      run: |
        cd client
        npm run test:coverage
        cd ..

    - name: Build application
      run: |
        npm run build

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: server
        name: server-coverage-${{ matrix.node-version }}

    - name: Upload client coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: client
        name: client-coverage-${{ matrix.node-version }}

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          server/coverage/
          client/coverage/
          server/test-results/
          client/test-results/

  e2e:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd server && npm ci
        cd ../client && npm ci
        cd ..

    - name: Install Playwright browsers
      run: |
        cd client && npx playwright install --with-deps
        cd ..

    - name: Start application
      run: |
        npm run dev &
        # Wait for application to start
        sleep 30

    - name: Run E2E tests
      run: |
        cd client
        npx playwright test --project=${{ matrix.browser }}
        cd ..

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-results-${{ matrix.browser }}
        path: |
          client/playwright-report/
          client/test-results/

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd server && npm ci
        cd ../client && npm ci
        cd ..

    - name: Build application
      run: |
        npm run build

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  security:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: |
        npm audit --audit-level moderate
        cd server && npm audit --audit-level moderate
        cd ../client && npm audit --audit-level moderate
        cd ..

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  deploy:
    runs-on: ubuntu-latest
    needs: [test, e2e, performance, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd server && npm ci
        cd ../client && npm ci
        cd ..

    - name: Build application
      run: |
        npm run build

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here

    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here

    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}